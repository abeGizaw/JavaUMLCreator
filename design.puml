@startuml
package presentation {
    +class ANSIColors {
        // lots of color constants
    }


    +class LinterMain {
        -saver: Saver
        -linter: Linter
        +LinterMain()
        -lint(): void
        -promptUserForDirectory(): String
        -promptUserForOutputFileName(): String
        -promptUserForChecks(): String
        -validateUserSelectedChecks(checks: String): List<CheckType>
        -prettyPrint(Messages: List<Message>): void
        -saveToFile(message: String): void
    }

    }

package domain {
    +class Linter {
        -checkTypeToCheck: Map<CheckType, Check>
        -myClassNodeCreator: MyClassNodeCreator
        -myClassNodes: List<MyClassNode>
        +Linter(classPaths: List<String>, myClassNodeCreator: MyClassNodeCreator)
        +runSelectedChecks(List<CheckType>): List<Message>
        -createClassNodes(classPaths: List<String>): List<MyClassNode>
        -createSelectedChecks(List<CheckType>): List<Check>
    }
    +interface Check {
        +{abstract}run(classNode: MyClassNode): List<Message>
    }

    +enum CheckType {
        HIDDEN_FIELDS,
        NAMING_CONVENTIONS,
        MAGIC_NUMBERS,
        INTERFACE_OVER_IMPLEMENTATION,
        COMPOSITION_OVER_INHERITANCE,
        PLK,
        TEMPLATE,
        STRATEGY,
        ADAPTER
    }
    +class Message {
        -checkType: CheckType
        -message: String
        -classOfInterest: String
        +Message(checkType: CheckType, classOfInterest: String, message: String)
        +getCheckType(): CheckType
        +getMessage(): String
        +getClassOfInterest(): String
    }

    +class MyClassNodeCreator {
        +createMyClassNode(path: String): MyClassNode
    }

    +class AdapterPattern {
        -classNodes: List<MyClassNode>
        -classNames: List<String>
        -interfaceNames: Set<String>

        +AdapterPattern(classNodes: List<MyClassNode>)
        -findAdapterPatterns(): List<AdapterPatternClasses>
        -getImplementedInterfaces(classNode: MyClassNode): List<String>
        -getNotJavaClassFieldTypes(classNode: MyClassNode): List<String>
        -fieldTypeIsClass(fieldType: String): boolean
        -findAdapterPatternClients(possibleAdapterPatterns: List<AdapterPatternClasses>): List<AdapterPatternClasses>
        -findImplementedInterfaces(className: String): List<String>
        -getAdapterPatternClassesForInterface(interfaceName: String,
        possibleAdapterPatterns: List<AdapterPatternClasses>, classNode: MyClassNode): List<AdapterPatternClasses>
    }

    +class AdapterPatternClasses {
        -adapter: String
        -concreteAdapter: String
        -adaptee: String
        -client: String
        +AdapterPatternClasses(concreteAdapter: String, adapter: String, adaptee: String, client: String)
        +AdapterPatternClasses(concreteAdapter: String, adapter: String, adaptee: String)
        +getAdapter(): String
        +getConcreteAdapter(): String
        +getAdaptee(): String
        +getClient(): String
    }

    +class CompositionOverInheritance{
        +run(classNode: MyClassNode): List<Message>
        -checkForInheritance(): List<Message>
    }

    +class FinalLocalVariables {
        -{static}{final} STORE_OPCODES
        -localVariables: List<LocalVariableInfo>
        -prevInsnIsLabel: boolean
        -prevInsn: MyAbstractInsnNode

        +FinalLocalVariables()
        +run(classNode: MyClassNode): List<Message>
        -checkMethodForFinalLocalVariables(methodNode: MyMethodNode): void
        -addLocalVariable(methodNode: MyMethodNode): void
        -updateVariableScopes(insn: MyAbstractInsnNode): void
        -setInScopeVariables(insn: MyAbstractInsnNode, localVariables: List<MyLocalVariableNode>): void
        -setOutOfScopeVariables(insn: MyAbstractInsnNode, localVariables: List<MyLocalVariableNode>): void
        -handleValueStored(localVariableInfo: LocalVariableInfo): void
    }

    +class HiddenFields {
        +run(classNode: MyClassNode): List<Message>
        -checkFieldHiding(classNode: MyClassNode): List<String>
    }

    +class InterfaceOverImplementation {
        -myClassNodeCreator: MyClassNodeCreator

        +InterfaceOverImplementation(myClassNodeCreator: MyClassNodeCreator)
        +run(classNode: MyClassNode): List<Message>
        -checkImplementInterface(classNode: MyClassNode): List<String>
        -implementsOrExtendsClass(fieldClassNode: MyClassNode): boolean
        -checkIfAbstract(superName: String): boolean
    }

    +class LocalVariableInfo {
        -{final}name: String
        -{final}firstLabel: MyLabel
        -{final}lastLabel: MyLabel
        -{final}index: int
        -isInScope: boolean
        -hasBeenStored: boolean
        -hasBeenStoredOnce: boolean

        +LocalVariableInfo(name: String, firstLabel: MyLabel, lastLabel: MyLabel, index: int)
        +setIsInScope(isInScope: boolean): void
        +setHasBeenStored(hasBeenStored: boolean): void
        +setHasBeenStoredOnce(hasBeenStoredOnce: boolean): void
        +getIsInScope(): boolean
        +getHasBeenStored(): boolean
        +getHasBeenStoredOnce(): boolean
    }

     +class NamingConvention {
        +run(classNode: MyClassNode): List<Message>
        -checkClassName(): void
        -checkFieldNames(): void
        -checkMethodName(): void
        -invalidCamelCase(name: String): boolean
        -invalidPascalCase(name: String): boolean
    }

    +class PrincipleOfLeastKnowledge {
        +run(classNode: MyClassNode): List<Message>
    }

    +class StrategyPattern {
        -myClassNodeCreator: MyClassNodeCreator

        +StrategyPattern(myClassNodeCreator: MyClassNodeCreator)
        +run(classNode: MyClassNode): List<Message>
        -checkForStrategyPattern(): void
        -checkFieldForStrategyPattern(field: MyFieldNode)
        -fieldIsAbstractAndValidClass(name: String, originalClassName: String, fieldName: String): boolean
        -fieldIsAbstractType(myClassNode: MyClassNode): boolean
        -findSetter(myClassNode: MyClassNode, fieldName: String, fieldType): String
    }

    +class TemplateMethodPattern{
        +run(classNode: MyClassNode): List<Message>
        -detectTemplateMethod(myClassNode: ClassNode): boolean
        -containsAbstractMethodCall(instructions: <MyAbstractInsnNode>, methods: List<MyMethodNode>): boolean
        -isAMethodCall(node: MyAbstractInsnNode): boolean
    }


    +abstract class MyAbstractInsnNode {
        +{static}{final} LABEL: int
        +getNext(): MyAbstractInsnNode
        +getOpcode(): int
        +{abstract}getType(): int

    }

    +class MyASMAbstractInsnNodeFactory{
        +MyASMAbstractInsnNode(abstractInsnNode: AbstractInsnNode)
        +constructTypedInsnNode(insn: AbstractInsnNode): MyAbstractInsnNode
      }

    +abstract class MyClassNode {
        +access: int
        +name: String
        +superName: String
        +interfaces: List<String>
        +fields: List<MyFieldNode>
        +methods: List<MyMethodNode>
    }

    +class MyASMClassNode{
        -classNode: ClassNode
        //takes all fields of abstract
        +MyASMClassNode(classNode: ClassNode)
    }

    +interface MyClassReader {
    }

    +class MyASMClassReader{
        -classReader: ClassReader

        +MyASMClassReader(classReader: ClassReader)
    }

    +abstract class MyFieldNode {
        +desc: String
        +name: String
        +access: int
    }

    +class MyASMFieldNode {
        -fieldNode: FieldNode
        //takes all fields of abstract

        +MyASMFieldNode(fieldNode: FieldNode)
    }

    +interface MyLabel {
    }

    +class MyASMLabel{
        - label: Label

        +MyASMLabel(label: Label)
    }

    +abstract class MyMethodNode {
        -insnFactory: MyASMAbstractInsnNodeFactory
        +access: int
        +name: String
        +desc: String
        +instructions: List<MyAbstractInsnNode>
        +localVariables: List<MyLocalVariableNode>
    }

    +class MyASMMethodNode{
        -methodNode: MethodNode
        //takes all fields of abstract

        +MyASMMethodNode(methodNode: MethodNode)
        -adaptInstructions(): List<MyAbstractInsnNode>
        -adaptLocalVariables(): List<MyLocalVariableNode>
    }


    +abstract class MyLocalVariableNode {
        +end: MyLabelNode
        +index: int
        +name: String
        +start: MyLabelNode

    }

    +class MyASMLocalVariableNode{
       -localVariableNode: LocalVariableNode
       //takes all fields of abstract

       +MyASMLocalVariableNode(localVariableNode: LocalVariableNode)
       -convertEndLabel(): MyLabelNode
       -convertStartLabel(): MyLabelNode
    }

    +abstract class MyLabelNode{
        +getLabel(): MyLabel
    }

    +class MyASMLabelNode {
        -labelNode: LabelNode

        +MyASMLabelNode(labelNode: LabelNode)
        (inherits all methods)
    }

    +abstract class MyMethodInsnNode{
        +name: String
        +desc: String
    }

    +class MyASMMethodInsnNode{
        // takes all fields of abstract
        - methodInsnNode: MethodInsnNode

        +MyASMMethodInsnNode(methodInsNode: MethodInsnNode)

    }

    +abstract class MyVarInsnNode {
           +var: int
       }
    +class MyASMVarInsnNode {
        - varInsnNode: VarInsnNode
        //takes all fields of abstract

        +MyASMVarInsnNode(varInsnNode: VarInsnNode)
    }

    +abstract class MyFieldInsnNode{
        +name: String
        +desc: String
    }

    +class MyASMFieldInsnNode{
        -fieldInsnNode: FieldInsnNode

        +MyASMFieldInsnNode(fieldInsnNode: FieldInsnNode)
    }

    +class MyDefaultInsnNode{

    }

    +interface MyOpcodes {
        + {static}{final} ISTORE: int
        + {static}{final} LSTORE: int
        + {static}{final} FSTORE: int
        + {static}{final} DSTORE: int
        + {static}{final} ASTORE: int
        + {static}{final} INVOKEVIRTUAL: int
        + {static}{final} INVOKEINTERFACE: int
        + {static}{final} INVOKEDYNAMIC: int
        + {static}{final} INVOKESPECIAL: int
        + {static}{final} ACC_ABSTRACT: int
        + {static}{final} ACC_INTERFACE: int
        + {static}{final} ACC_STATIC: int
        + {static}{final} ACC_FINAL: int
        + {static}{final} PUTFIELD: int
        + {static}{final} PUTSTATIC: int
    }
}

package datasource {

    +interface Saver {
        +{abstract} saveMessage(message: String): void
    }
    +class MessageSaver implements Saver {
        +MessageSaver(path:String)
        +saveMessage(message: String): void
    }
}

package org.objectweb.asm {
    +class AbstractInsnNode {
    }

    +class ClassNode {
    }

    +class ClassReader {
    }

    +class FieldNode {
    }

    +class Label {
    }

    +class LabelNode {
    }

    +class LocalVariableNode{
    }

    +class MethodInsnNode{
    }

    +class MethodNode {
    }

    +class VarInsnNode {
    }
    +class FieldInsnNode{
    }
}

LinterMain ..> ANSIColors
LinterMain ..> CheckType
LinterMain ..> Message
LinterMain --> Linter
LinterMain ..> Linter
LinterMain ..> MyClassNodeCreator
LinterMain --> Saver
'LinterMain .down.> domain.MyClassNode
'LinterMain .down.> domain.MyClassReader

Linter -> "*"CheckType
Linter --> "*"Check
Linter ..> Check
Linter -> MyClassNodeCreator
Linter --> "*" MyClassNode
Linter ..> CheckType
Linter .up.> Message

Message --> CheckType


'MyASMAbstractInsnNode --up|>  MyAbstractInsnNode
MyASMClassNode ..up|> MyClassNode
MyASMClassReader .up|> MyClassReader
MyASMFieldNode -up|> MyFieldNode
MyASMLabel ..up|> MyLabel
MyASMMethodNode ..up|> MyMethodNode
MyASMLabelNode -|> MyLabelNode
MyASMLocalVariableNode -up|> MyLocalVariableNode
MyASMMethodInsnNode ..up|> MyMethodInsnNode
MyMethodInsnNode -up-|> MyAbstractInsnNode
MyASMMethodNode -up-|> MyMethodNode
MyASMVarInsnNode -up|> MyVarInsnNode
MyLabelNode -|> MyAbstractInsnNode
MyVarInsnNode -up-|> MyAbstractInsnNode
MyASMFieldInsnNode -up-|> MyFieldInsnNode
MyFieldInsnNode -up-|> MyAbstractInsnNode
MyDefaultInsnNode -up-|> MyAbstractInsnNode

MyASMAbstractInsnNodeFactory ..> MyAbstractInsnNode
MyMethodNode ..> MyASMAbstractInsnNodeFactory
MyMethodNode --> MyASMAbstractInsnNodeFactory

Check .up> Message
Check --> domain.MyClassNode
Check <|.. AdapterPattern
Check <|.. FinalLocalVariables
Check <|.. PrincipleOfLeastKnowledge
Check <|.. HiddenFields
Check <|.. InterfaceOverImplementation
Check <|.. TemplateMethodPattern
Check <|.. StrategyPattern
Check <|.. NamingConvention
Check <|.. CompositionOverInheritance


MyClassNodeCreator ..> MyClassNode
MyClassNodeCreator ..> MyClassReader

InterfaceOverImplementation --> MyClassNodeCreator

StrategyPattern --> MyClassNodeCreator
StrategyPattern ..> MyClassNode
StrategyPattern ..> MyFieldNode
StrategyPattern ..> MyFieldInsnNode
StrategyPattern ..> MyAbstractInsnNode
StrategyPattern ..> MyMethodNode
StrategyPattern ..> MyOpcodes

TemplateMethodPattern ..> MyAbstractInsnNode
TemplateMethodPattern ..> MyMethodNode
TemplateMethodPattern ..> MyClassNode

CompositionOverInheritance ..> MyClassNode

NamingConvention ..> MyClassNode
NamingConvention ..> MyFieldNode
NamingConvention ..> MyMethodNode
NamingConvention ..> MyOpcodes


AdapterPattern ..> AdapterPatternClasses
AdapterPattern -->"*" MyClassNode
AdapterPattern ..> MyFieldNode


FinalLocalVariables -->"*" LocalVariableInfo
FinalLocalVariables ..> LocalVariableInfo
FinalLocalVariables --> MyAbstractInsnNode
FinalLocalVariables --> MyClassNode
FinalLocalVariables ..> MyLabel
FinalLocalVariables ..> MyLabelNode
FinalLocalVariables .....> MyLocalVariableNode
FinalLocalVariables ..> MyMethodNode
FinalLocalVariables -->"*" MyOpcodes
FinalLocalVariables ..> MyVarInsnNode

HiddenFields ..> MyClassNode

InterfaceOverImplementation ..> MyClassNode


LocalVariableInfo -->"2" MyLabel

'MyASMAbstractInsnNode --> org.objectweb.asm.AbstractInsnNode
'MyASMAbstractInsnNode ..> org.objectweb.asm.AbstractInsnNode

MyASMClassNode --> org.objectweb.asm.ClassNode
MyASMClassNode ..> org.objectweb.asm.ClassNode

MyASMClassReader --> org.objectweb.asm.ClassReader
MyASMClassReader ..> org.objectweb.asm.ClassReader

MyASMFieldNode --> org.objectweb.asm.FieldNode
MyASMFieldNode ..> org.objectweb.asm.FieldNode

MyASMLabel --> org.objectweb.asm.Label
MyASMLabel ..> org.objectweb.asm.Label

MyASMLabelNode --> org.objectweb.asm.LabelNode
MyASMLabelNode ..> org.objectweb.asm.LabelNode

MyASMLocalVariableNode -down--> org.objectweb.asm.LocalVariableNode
MyASMLocalVariableNode .down..> org.objectweb.asm.LocalVariableNode

MyASMMethodInsnNode -> org.objectweb.asm.MethodInsnNode
MyASMMethodInsnNode .> org.objectweb.asm.MethodInsnNode

MyASMMethodNode --> org.objectweb.asm.MethodNode
MyASMMethodNode ..> org.objectweb.asm.MethodNode

MyASMVarInsnNode --> org.objectweb.asm.VarInsnNode
MyASMVarInsnNode ..> org.objectweb.asm.VarInsnNode

MyClassNode -->"*" MyFieldNode
MyClassNode -->"*" MyMethodNode

MyLabelNode ..> MyLabel

MyLocalVariableNode -->"2" MyLabelNode

MyMethodNode -->"*" MyLocalVariableNode
MyMethodNode -->"*" MyAbstractInsnNode



@enduml