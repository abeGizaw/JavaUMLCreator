@startuml
package presentation {
    +class ANSIColors {
        // lots of color constants
    }

    +class LinterMain {
        +LinterMain()
        +{static}main(args: String[]): void
        -{static}parseDirectory(directoryPath: Path): List<String>
        -{static}lintForMessages(checks: Set<LintType>, transformations: Set<LintType>, linter: Linter): List<Message>
        -{static}generateAndSaveDiagramsToFile(linter: Linter, diagrams: Map<LintType, String>, saver: Saver):void
        -{static}promptUserForDirectory(): Path
        -{static}isValidPath(inputPath: String): boolean
        -{static}promptUserForOutputFileName(): String
        -{static}promptUserForChecks(): Set<LintType>
        -{static}promptUserForPrinciples(): Set<LintType>
        -{static}promptUserForPatterns(): Set<LintType>
        -{static}promptUserForStyle(): Set<LintType>
        -{static}promptUserForTransformations(): Set<LintType>
        -{static}promptUserForDiagrams:Map<LintType,String>
        -{static}promptUser(): String
        -{static}prettyPrint(): void
        -{static}saveMessagesToFile(messages: List<Message>, outputPath: String): void
        -{static}writeDiagramFiles(fileOutput:String, lintType:LintType, stringBuilder:StringBuilder, saver:Saver):void
    }
}

package domain {
   package constants{
        +class Constants{
            +{static}{final}PUML_TYPE: String
            +{static}{final}OUTPUT_DIRECTORY_FOR_CHECKS: String
            +{static}{final}OUTPUT_FOR_PUML_CLASSDIAGRAM: String
            +{static}{final}ABBREVIATION_ERROR: String
            +{static}{final}INVALID_PACKAGE: String
        }
   }

   package checks{
        +class AdapterPattern {
            -myClassNodes: List<MyClassNode>
            -classNames: List<String>
            -interfaceNames: Set<String>
            +AdapterPattern(classNodes: List<MyClassNode>)
            +run(classNode: MyClassNode): List<Message>
            -findAdapterPatterns(): List<AdapterPatternClasses>
            -getImplementedInterfaces(myClassNode: MyClassNode): List<String>
            -getNotJavaClassFieldTypes(myClassNode: MyClassNode): List<String>
            -fieldTypeIsClass(fieldType: String): boolean
            -findAdapterPatternClients(possibleAdapterPatterns: List<AdapterPatternClasses>): List<AdapterPatternClasses>
            -getAdapterPatternClassesForInterface(interfaceName: String, possibleAdapterPatterns: List<AdapterPatternClasses>, myClassNode: MyClassNode): List<AdapterPatternClasses>
            -createMessages(adapterPatterns: List<AdapterPatternClasses>): List<Message>
        }

         +class AdapterPatternClasses {
                -adapter: String
                -target: String
                -adaptee: String
                -client: String
                +AdapterPatternClasses(adapter: String, target: String, adaptee: String, client: String)
                +AdapterPatternClasses(adapter: String, taret: String, adaptee: String)
                +getAdapter(): String
                +getTarget(): String
                +getAdaptee(): String
                +getClient(): String
        }

        +interface Check {
            +{abstract}run(classNode: MyClassNode): List<Message>
        }

        +class CompositionOverInheritance {
            +run(classNode: MyClassNode): List<Message>
            -checkForInheritance(classNode: MyClassNode): List<Message>
        }

        +class DetectUnusedFields {
           -{final}classNodes: List<MyClassNode>
           -{final}fieldUsageMap: Map<MyFieldNode, Boolean>
           -{final}fieldToClass: Map<MyFieldNode, MyClassNode>
           -{final}nameToFieldNode: Map<String, MyFieldNode>

           +DetectUnusedFields(classNodes: List<MyClassNode>)
           +run(classNode: MyClassNode): List<Message>
           +getNamesToDelete(): List<String>
           -detectAllUnusedFields(classNodes: List<MyClassNode>): void
           -populateFieldMaps(): void
           -generateUnusedMessages(): List<Message>
       }

        +class FinalLocalVariables {
            -{static}{final}STORE_OPCODES: Set<Integer>
            -localVariableManager: LocalVariableManager

            +FinalLocalVariables()
            +run(classNode: MyClassNode): List<Message>
            -checkMethodForFinalLocalVariables(myMethodNode: MyMethodNode): void
            -handleValueStored(localVariableInfo: LocalVariableInfo): void
            -createMessagesForMethod(className: String, methodName: String): List<Message>
        }

        +class HiddenFields {
            +run(classNode: MyClassNode): List<Message>
            -checkFieldHiding(classNode: MyClassNode): List<Message>
        }

        +class LocalVariableInfo {
            -{final}name: String
            -{final}firstLabel: MyLabel
            -{final}lastLabel: MyLabel
            -{final}index: int
            -isInScope: boolean
            -hasBeenStored: boolean
            -hasBeenStoredOnce: boolean

            +LocalVariableInfo(name: String, firstLabel: MyLabel, lastLabel: MyLabel, index: int)
            +setIsInScope(isInScope: boolean): void
            +setHasBeenStored(hasBeenStored: boolean): void
            +setHasBeenStoredOnce(hasBeenStoredOnce: boolean): void
            +getName(): String
            +getFirstLabel(): MyLabel
            +getLastLabel(): MyLabel
            +getIndex(): int
            +getIsInScope(): boolean
            +getHasBeenStored(): boolean
            +getHasBeenStoredOnce(): boolean
        }

        +class LocalVariableManager {
            -{static}{final}STORE_OPCODES: Set<Integer>
            -{static}{final}LOAD_OPCODES: Set<Integer>
            -localVariables: Set<LocalVariableInfo>
            -parameters: Set<LocalVariableInfo>
            -createdVariables: Set<LocalVariableInfo>
            -prevInsnIsLabel: boolean
            -prevInsn: MyAbstractInsnNode

            +LocalVariableManager(myMethodNode: MyMethodNode)
            -loadLocalVariables(myMethodNode: MyMethodNode): void
            +updateVariableScopes(insn: MyAbstractInsnNode): void
            -setInScopeVariables(insn: MyAbstractInsnNode, localVariables: Set<LocalVariableInfo>): void
            -setOutOfScopeVariables(insn: MyAbstractInsnNode, localVariables: Set<LocalVariableInfo>): void
            +addCreatedVariable(myAbstractInsnNode: MyAbstractInsnNode): void
            +isCreatedVariable(myAbstractInsnNode: MyAbstractInsnNode): boolean
            +isParameter(myAbstractInsnNode: MyAbstractInsnNode): boolean
            +getVariableAtIndex(index: int): LocalVariableInfo
            +getHasBeenStoredOnce(): Set<LocalVariableInfo>
        }

         +class NamingConventionCheck {
            +run(classNode: MyClassNode): List<Message>
            -checkClassName(classNode: MyClassNode): Message
            -checkFieldNames(classNode: MyClassNode): List<Message>
            -checkMethodName(classNode: MyClassNode): List<Message>
            -invalidCamelCase(name: String): boolean
            -invalidPascalCase(name: String): boolean
            -isAllCaps(fieldName: String): boolean
        }

        +class PrincipleOfLeastKnowledge {
            -{static}{final}METHOD_OPCODES: Set<Integer>
            -{final}instructionStack: Stack<MyAbstractInsnNode>
            +run(classNode: MyClassNode): List<Message>
            -checkMethod(myMethodNode: MyMethodNode): List<String>
            -isConstructor(myAbstractInsnNode: MyAbstractInsnNode): boolean
            -getInvalidReceiverNode(myAbstractInsnNode: MyAbstractInsnNode, localVariableManager: LocalVariableManager): String
            -removeMethodArgument(): void
            -createMessagesForMethod(messageTexts: List<String>, className: String): List<Message>
        }

        +class ProgramInterfaceNotImplementation {
            -{final}classNodeCreator: MyClassNodeCreator
            +ProgramInterfaceNotImplementation(nodeCreator: MyClassNodeCreator)
            +run(classNode: MyClassNode): List<Message>
            -checkImplementInterface(classNode: MyClassNode): List<Message>
            -getClassName(desc: String): String
            -isPrimitive(desc: String): boolean
            -isJavaAPIClass(className: String): boolean
            -checkFieldClassNode(classNode: MyClassNode, fieldClassNode: MyClassNode , field: MyFieldNode, invalidUses: List<Message>): void
            -implementsInterfaceOrExtendsClass(fieldClassNode: MyClassNode): boolean
            -checkIfAbstract(superName: String): boolean
        }

        +class StrategyPattern {
            -{final}myClassNodeCreator: MyClassNodeCreator
            +StrategyPattern(creator: MyClassNodeCreator)
            +run(classNode: MyClassNode): List<Message>
            -checkForStrategyPattern(classNode: MyClassNode): List<Message>
            -checkFieldForStrategyPattern(field: MyFieldNode, classNode: MyClassNode): Message
            -fieldIsAbstractAndValidClass(name: String): boolean
            -fieldIsAbstractType(classNode: MyClassNode): boolean
            -findSetter(classNode: MyClassNode, fieldName: String, fieldType: String): String
        }

        +class TemplateMethodPattern {
            +run(classNode: MyClassNode): List<Message>
            -detectTemplateMethod(myClassNode: MyClassNode): List<Message>
            -containsAbstractMethodCall(instructions: List<MyAbstractInsnNode>, methods: List<MyMethodNode>): boolean
            -similarAbstractMethodInsn(methodInsnNode: MethodInsnNode, methodNode: MyMethodNode): boolean
            -isAMethodCall(node: MyAbstractInsnNode): boolean
        }
    }

    package transformations{
        +class DeleteUnusedFields {
             -{final}modifiedClassNodes: List<ClassNode>
             -{final}outputPath: String
             -{final}byteCodeExporter: Exporter
             +DeleteUnusedFields(path: String)
             +run(classNodes: List<MyClassNode>): List<Message>
             -deleteUnusedFields(classNode: ClassNode, fieldsToDelete: List<String>): ClassNode
             -exportModifiedClassNodes(): List<Message>
        }

        +class FieldsRemover {
             -{final}fieldsToRemove: List<String>
             +FieldsRemover(api: int, cv: ClassVisitor, fieldsToRemove: List<String>)
             +visitField(access: int, name: String, descriptor: String, signature: String, value: Object): FieldVisitor
             +visitMethod(access: int, name: String, descriptor: String, signature: String, exceptions: String[]): MethodVisitor
        }

       -class (static)CustomMethodVisitor {
             -{final}fieldsToRemove: List<String>
             +CustomMethodVisitor(api: int, mv: MethodVisitor, fieldsToRemove: List<String>)
             +visitFieldInsn(opcode: int, owner: String, name: String, descriptor: String): void
       }

       +interface Transformation {
            +{abstract} run(classNodes: List<ClassNode>): List<Message>
       }
    }

    package diagramconverter{
        +interface Diagram{
        	+generateDiagramByNode(myClassNode:MyClassNode, pumlContent:StringBuilder):void
        	+generateDiagram(classNode:List<MyClassNode>):StringBuilder
        }

        +class ConvertASMToUML{
        	-{final} classUmlContent: StringBuilder
        	+ConvertASMToUML(classUmlContent:StringBuilder):void
        	+generateDiagramByNode(myClassNode:MyClassNode, pumlContent:StringBuilder):void
        	+generateDiagram(myClassNodeList:List<MyClassNode>):StringBuilder
        	-convertClassInfo(myClassNode:MyClassNode):String
        	-convertClassFields(fields:List<MyFieldNode>):String
        	-convertClassMethods(methods:List<MyMethodNode>, className:String):String
        	-convertOuterClassInfo(myClassNode:MyClassNode, classString:StringBuilder, classType:String):void
        	-convertInnerClassInfo(myClassNode:MyClassNode, classString:StringBuilder, classType:String):void
        	-getClassType(access:int):String
        	-findInnerClassNode(myClassNode:MyClassNode, name:String):MyInnerClassNode
        	-methodIsUserGenerated(method:MyMethodNode):boolean
        	-appendFieldInfo(fieldString:StringBuilder, field:MyFieldNode):void
        	-getMethodInfo(desc:String, methodNode:MyMethodNode):String
        	-getParameterNames(methodNode:MyMethodNode, paramInfo:List<String>):List<String>
        	-generateListOfParams(desc:String, params:List<String>):void
        	-processObjectDescriptor(desc:String):String
        	-processArrayDescriptor(desc:String):String
        	-analyzeForParams(paramInfo:List<String>, paramNames:List<String>):String
        	-appendParamInfo(paramsBuilder:StringBuilder, param:String, parameterName:String):void
        	-getFieldType(desc:String):String
        	-getCollectionType(desc:String):String
        	-isSynthetic(access:int):boolean
        	-isPrimitive(desc:String):boolean
        	-getPrimitiveFieldType(desc:String):String
        	-getAccessModifier(access:int):String
        	-getNonAccessModifiers(access:int):String
        }

    }

    package myasm {
        +class MyASMAbstractInsnNodeFactory{
            +MyASMAbstractInsnNode(abstractInsnNode: AbstractInsnNode)
            +constructTypedInsnNode(node: AbstractInsnNode): MyAbstractInsnNode
        }

        +class MyASMClassNode{
            -{final}classNode: ClassNode
            +MyASMClassNode(classNode: ClassNode)
            +getClassNode(): ClassNode
            -convertFields(): List<MyFieldNode>
            -convertMethods(): List<MyMethodNode>
            -convertInnerClasses(): List<MyInnerClassNode>
        }

        +class MyASMClassNodeCreator {
            -{final}directoryPath: Path
            -{final}PACKAGE_NOT_FOUND: int
            +MyASMClassNodeCreator(directoryPath: Path)
            +createMyClassNodeFromName(path: String): MyClassNode
            +createMyClassNodeFromFile(path: File): MyClassNode
            +createUniqueMyClassNodeFromName(className: String): MyClassNode
            -createMyClassNode(reader: ClassReader): MyClassNode
            -findRelativePath(description: String): String
        }

        +class MyASMFieldInsnNode{
            -{final}fieldInsnNode: FieldInsnNode
            -{final}factory: MyASMAbstractInsnNodeFactory
            +MyASMFieldInsnNode(abstractInsnNode: AbstractInsnNode)
            +getNext(): MyAbstractInsnNode
            +getOpcode(): int
            +getType(): int
        }

        +class MyASMClassReader{
            -classReader: ClassReader

            +MyASMClassReader(classReader: ClassReader)
        }

        +class MyASMFieldNode {
            -{final}fieldNode: FieldNode
            +MyASMFieldNode(fieldNode: FieldNode)
        }

        +class MyASMLabel{
            -{final}label: Label
            +MyASMLabel(label: Label)
            +equals(otherLabel: MyLabel): boolean
            +getLabel(): Label
        }

        +class MyASMLabelNode {
            -{final}labelNode: LabelNode
            -{final}factory: MyASMAbstractInsnNodeFactory
            +MyASMLabelNode(labelNode: AbstractInsnNode)
            +getNext(): MyAbstractInsnNode
            +getOpcode(): int
            +getType(): int
            +getLabel(): MyLabel
        }

        +class MyASMLocalVariableNode{
           -{final}localVariableNode: LocalVariableNode
           +MyASMLocalVariableNode(localVariableNode: LocalVariableNode)
        }

        +class MyASMMethodInsnNode{
            -{final}methodInsnNode: MethodInsnNode
            -{final}factory: MyASMAbstractInsnNodeFactory
            +MyASMMethodInsnNode(methodInsNode: AbstractInsnNode)
            +getNext(): MyAbstractInsnNode
            +getOpcode(): int
            +getType(): int
        }

        +class MyASMMethodNode{
            -{final}methodNode: MethodNode
            -{final}factory: MyASMAbstractInsnNodeFactory
            +MyASMMethodNode(methodNode: MethodNode)
            -convertInstructionNodes(): List<MyAbstractInsnNode>
            -convertLocalVariableNodes(): List<MyLocalVariableNode>
        }

        +class MyASMType {
            -{final}type: Type
            +MyASM(type: Type)
            +MyASM()
            +getArgumentTypes(): Type[]
            +getType(): MyType
        }

        +class MyASMVarInsnNode {
            -{final}varInsnNode: VarInsnNode
            -{final}factory: MyASMAbstractInsnNodeFactory
            +MyASMVarInsnNode(varInsnNode: VarInsnNode)
            +getNext(): MyAbstractInsnNode
            +getOpcode(): int
            +getType(): int
        }

        +class MyASMInnerClassNode{
        	-{final} innerClassNode: InnerClassNode
        	+MyASMInnerClassNode(icn:InnerClassNode):void
        }
    }

     +class Linter {
        -{final}creator: MyClassNodeCreator
        -{final}myClassNodes: List<MyClassNode>
        -{final}checkTypeToCheck: Map<LintType, Check>
        -{final}transformationTypeToTransformation: Map<LintType, Transformation>
        -{final}diagramTypeToDiagram: Map<LintType, Diagram>
        +Linter(classPaths: List<String>, myClassNodeCreator: MyClassNodeCreator, outputPath: String)
        +runSelectedChecks(lintTypes: Set<LintType>): List<Message>
        +runSelectedTransformations(transformations: Set<LintType>): List<Message>
        +generateDiagrams(Set<LintType> diagrams):Map<StringBuilder,LintType>
        -populateTransformMap(outputPath: String): void
        -populateCheckMap(): void
        -populateDiagramMap():void
        -createClassNodes(classPaths: List<String>): List<MyClassNode>
        -runCheckOnAllNodes(lintType: LintType): List<Message>
        }

    +enum LintType {
        HIDDEN_FIELDS,
        NAMING_CONVENTION,
        FINAL_LOCAL_VARIABLES,
        UNUSED_FIELD,
        INTERFACE_OVER_IMPLEMENTATION,
        COMPOSITION_OVER_INHERITANCE,
        PLK,
        TEMPLATE_METHOD_PATTERN,
        STRATEGY_PATTERN,
        ADAPTER_PATTERN,
        UML_CONVERTER
    }

    +class Message {
        -{final}lintType: LintType
        -{final}message: String
        -{final}classOfInterest: String
        +Message(cType: LintType, classNameOfInterest: String, mess: String)
        +getLintType(): LintType
        +getMessage(): String
        +getClassOfInterest(): String
        +toString(): String
        +equals(obj: Object): boolean
        +hashCode(): int
    }

    +abstract class MyAbstractInsnNode {
        +{static}{final}FIELD_INSN: int
        +{static}{final}LABEL: int
        +{static}{final}METHOD_INSN: int
        +{static}{final}VAR_INSN: int
        +{abstract}getNext(): MyAbstractInsnNode
        +{abstract}getOpcode(): int
        +{abstract}getType(): int

    }

    +abstract class MyClassNode {
        +access: int
        +fields: List<MyFieldNode>
        +interfaces: List<String>
        +methods: List<MyMethodNode>
        +name: String
        +superName: String
        +innerClasses: List<MyInnerClassNode>
    }

    +interface MyClassNodeCreator {
        +{abstract}createMyClassNodeFromName(path: String): MyClassNode
        +{abstract}createMyClassNodeFromFile(path: File): MyClassNode
        +{abstract}createUniqueMyClassNodeFromName(className: String): MyClassNode
    }

    +class MyDefaultInsnNode {
        +getNext(): MyAbstractInsnNode
        +getOpcode: int
        +getType(): int
    }

    +interface MyClassReader {
    }

    +abstract class MyFieldNode {
        +access: int
        +desc: String
        +name: String
        +signature: String
    }

    +interface MyLabel {
        +{abstract}equals(label: MyLabel): boolean
    }

    +abstract class MyMethodNode {
        +access: int
        +desc: String
        +instructions: List<MyAbstractInsnNode>
        +localVariables: List<MyLocalVariableNode>
        +name: String
        +signature: String
    }

    +abstract class MyLocalVariableNode {
        +end: MyLabelNode
        +index: int
        +name: String
        +start: MyLabelNode
    }

    +abstract class MyLabelNode{
        +{abstract}getLabel(): MyLabel
    }

    +abstract class MyMethodInsnNode{
        +desc: String
        +name: String
    }

    +abstract class MyVarInsnNode {
           +var: int
       }

    +abstract class MyFieldInsnNode{
        +desc: String
        +name: String
        +owner: String
    }

    +abstract class MyType {
        +{abstract}getArgumentTypes(): MyType[]
        +{abstract}getType(typeDescriptor: String): MyType
    }

    +abstract class MyInnerClassNode{
        +access: int
        +name: String
    }


    +interface MyOpcodes {
        {static}{final}ACC_PUBLIC: int
        {static}{final}ACC_ABSTRACT: int
        {static}{final}ACC_ENUM: int
        {static}{final}ACC_FINAL: int
        {static}{final}ACC_INTERFACE: int
        {static}{final}ACC_STATIC: int
        {static}{final}ACC_PRIVATE: int
        {static}{final}ACC_PROTECTED: int
        {static}{final}ACC_SYNTHETIC:int
        {static}{final}GETFIELD: int
        {static}{final}GETSTATIC: int
        {static}{final}PUTFIELD: int
        {static}{final}PUTSTATIC: int
        {static}{final}H_INVOKEINTERFACE: int
        {static}{final}H_INVOKESPECIAL: int
        {static}{final}H_INVOKESTATIC: int
        {static}{final}H_INVOKEVIRTUAL: int
        {static}{final}INVOKEDYNAMIC: int
        {static}{final}INVOKEINTERFACE: int
        {static}{final}INVOKESPECIAL: int
        {static}{final}INVOKEVIRTUAL: int
        {static}{final}ALOAD: int
        {static}{final}DLOAD: int
        {static}{final}FLOAD: int
        {static}{final}ILOAD: int
        {static}{final}LLOAD: int
        {static}{final}ASTORE: int
        {static}{final}DSTORE: int
        {static}{final}FSTORE: int
        {static}{final}ISTORE: int
        {static}{final}LSTORE: int
        {static}{final}ASM8: int
    }
}

package datasource {
    +interface Saver {
        +{abstract} saveMessage(message: String): void
        +{abstract} writeToFile(info: String, fileType: String, outputPath: String):void

    }
    +class LintResultSaver implements Saver {
        -logStream: PrintStream
        -basePath: String
        +LintResultSaver(path: String)
        +saveMessage(message: String): void
        +writeToFile(info: String, fileType: String, outputPath: String):void
        -createDirectory(path: String): void
    }

    +interface Exporter{
        +{abstract}save(outputPath: String, className: String, bytecode:  byte[]): void
    }

    +class ByteCodeExporter{
        +save(outputPath: String, className: String, byteCode: byte[]): void
        -createDirectory(path: String): void
    }
    note left of ByteCodeExporter
        ByteCodeExporter depends on File
        and FIleOutputStream
    end note
    ByteCodeExporter .up.|> Exporter
}

package org.objectweb.asm {
    +class AbstractInsnNode {
    }
    +class ClassNode {
    }
    +class ClassReader {
    }
    +class FieldNode {
    }
    +class Label {
    }
    +class LabelNode {
    }
    +class LocalVariableNode{
    }
    +class MethodInsnNode{
    }
    +class MethodNode {
    }
    +class VarInsnNode {
    }
    +class FieldInsnNode{
    }
   +class MethodVisitor{
   }
   +class ClassVisitor{
   }
   +class MethodVisitor{
   }
   +class ClassWriter{
   }
   +class Type{
   }
   +class InnerClassNode{
   }
}

LinterMain ..> Linter
LinterMain ..> LintType
LinterMain ..> Message
LinterMain ..> MyASMClassNodeCreator
LinterMain ..> MyClassNodeCreator
LinterMain ..> Saver

Linter --> "*"Check
Linter ..> Check
Linter ..> DeleteUnusedFields
Linter .up.> Message
Linter -> "*" MyClassNode
Linter ..> MyClassNode
Linter --> MyClassNodeCreator
Linter -> "*"LintType
Linter ..> LintType
Linter -->"*" Transformation
Linter ...> Transformation
Linter -->"*" Diagram
Linter ..> Diagram

Message --> LintType

MyASMClassNode ..up|> MyClassNode
MyASMClassReader .up|> MyClassReader
MyASMFieldNode -up|> MyFieldNode
MyASMLabel ..up|> MyLabel
MyASMLabelNode -|> MyLabelNode
MyASMLocalVariableNode -up|> MyLocalVariableNode
MyASMMethodInsnNode ..up|> MyMethodInsnNode
MyMethodInsnNode -up-|> MyAbstractInsnNode
MyASMMethodNode -up-|> MyMethodNode
MyASMVarInsnNode -up|> MyVarInsnNode
MyASMInnerClassNode -up|> MyInnerClassNode
MyLabelNode -|> MyAbstractInsnNode
MyVarInsnNode -up-|> MyAbstractInsnNode
MyASMFieldInsnNode -up-|> MyFieldInsnNode
MyFieldInsnNode -up-|> MyAbstractInsnNode
MyDefaultInsnNode -up-|> MyAbstractInsnNode


MyASMAbstractInsnNodeFactory ..> MyAbstractInsnNode
MyASMAbstractInsnNodeFactory ..> MyASMFieldInsnNode
MyASMAbstractInsnNodeFactory ..> MyASMLabelNode
MyASMAbstractInsnNodeFactory ..> MyASMMethodInsnNode
MyASMAbstractInsnNodeFactory ..> MyASMVarInsnNode
MyASMAbstractInsnNodeFactory ..> MyDefaultInsnNode

Check .up> Message
Check --> domain.MyClassNode
Check <|.. AdapterPattern
Check <|.. FinalLocalVariables
Check <|.. PrincipleOfLeastKnowledge
Check <|.. HiddenFields
Check <|.. ProgramInterfaceNotImplementation
Check <|.. TemplateMethodPattern
Check <|.. StrategyPattern
Check <|.. NamingConventionCheck
Check <|.. CompositionOverInheritance
Check <|.. DetectUnusedFields

MyClassNodeCreator ..> MyClassNode
MyClassNodeCreator ..> MyClassReader

StrategyPattern ..> LintType
StrategyPattern ..> Message
StrategyPattern ..> MyAbstractInsnNode
StrategyPattern --> MyClassNodeCreator
StrategyPattern ..> MyClassNode
StrategyPattern ..> MyFieldNode
StrategyPattern ..> MyFieldInsnNode
StrategyPattern ..> MyMethodNode
StrategyPattern ..> MyOpcodes

TemplateMethodPattern ..> LintType
TemplateMethodPattern ..> MyAbstractInsnNode
TemplateMethodPattern ..> MyMethodNode
TemplateMethodPattern ..> MyMethodInsnNode
TemplateMethodPattern ..> MyClassNode
TemplateMethodPattern ..> MyOpcodes
TemplateMethodPattern ..> Message

CompositionOverInheritance ..> Message
CompositionOverInheritance ..> MyClassNode

NamingConventionCheck ..> Message
NamingConventionCheck ..> MyClassNode
NamingConventionCheck ..> MyFieldNode
NamingConventionCheck ..> MyMethodNode
NamingConventionCheck ..> MyOpcodes

AdapterPattern ..> AdapterPatternClasses
AdapterPattern ..> LintType
AdapterPattern ..> Message
AdapterPattern -->"*" MyClassNode
AdapterPattern ..> MyFieldNode

FinalLocalVariables ..> LintType
FinalLocalVariables ..> LocalVariableInfo
FinalLocalVariables --> LocalVariableManager
FinalLocalVariables ..> LocalVariableManager
FinalLocalVariables ..> Message
FinalLocalVariables ..> MyAbstractInsnNode
FinalLocalVariables ..> MyMethodNode
FinalLocalVariables ..> MyOpcodes

HiddenFields ..> MyClassNode
HiddenFields ..> MyFieldNode
HiddenFields ..> MyLocalVariableNode
HiddenFields ..> MyMethodNode
HiddenFields ..> Message

LocalVariableInfo -->"2" MyLabel

LocalVariableManager -->"*" LocalVariableInfo
LocalVariableManager ..> LocalVariableInfo
LocalVariableManager --> MyAbstractInsnNode
LocalVariableManager ..> MyLabel
LocalVariableManager ..> MyLabelNode
LocalVariableManager ..> MyLocalVariableNode
LocalVariableManager ..> MyOpcodes
LocalVariableManager ..> MyVarInsnNode

PrincipleOfLeastKnowledge ..> LintType
PrincipleOfLeastKnowledge ..> LocalVariableManager
PrincipleOfLeastKnowledge ..> Message
PrincipleOfLeastKnowledge -->"*" MyAbstractInsnNode
PrincipleOfLeastKnowledge ..> MyFieldInsnNode
PrincipleOfLeastKnowledge ..> MyMethodNode
PrincipleOfLeastKnowledge ..> MyMethodInsnNode
PrincipleOfLeastKnowledge ..> MyOpcodes
PrincipleOfLeastKnowledge ..> MyType
PrincipleOfLeastKnowledge ..> MyVarInsnNode

ProgramInterfaceNotImplementation ..> Message
ProgramInterfaceNotImplementation ..> MyClassNode
ProgramInterfaceNotImplementation --> MyClassNodeCreator
ProgramInterfaceNotImplementation ..> MyFieldNode
ProgramInterfaceNotImplementation ..> MyOpcodes
ProgramInterfaceNotImplementation ..> LintType

DetectUnusedFields --->"*" MyClassNode
DetectUnusedFields ->"*" MyFieldNode
DetectUnusedFields -> MyMethodNode
DetectUnusedFields .> MyAbstractInsnNode
DetectUnusedFields .> MyFieldInsnNode
DetectUnusedFields ..> MyOpcodes
DetectUnusedFields ..> Message

DeleteUnusedFields .up.|> Transformation
DeleteUnusedFields ..> ByteCodeExporter
DeleteUnusedFields ->"*" ClassNode
DeleteUnusedFields .> ClassNode
DeleteUnusedFields ..> ClassWriter
DeleteUnusedFields -> Exporter
DeleteUnusedFields ..> DetectUnusedFields
DeleteUnusedFields .> FieldsRemover
DeleteUnusedFields ..> Message
DeleteUnusedFields .> MyClassNode
DeleteUnusedFields .> MyOpcodes

Transformation .> Message
Transformation .> MyClassNode

Diagram .> MyClassNode

ConvertASMToUML ..> MyClassNode
ConvertASMToUML ..> MyFieldNode
ConvertASMToUML ..> MyMethodNode
ConvertASMToUML ..> MyLocalVariableNode
ConvertASMToUML ..> MyInnerClassNode


CustomMethodVisitor -|> MethodVisitor
CustomMethodVisitor .> MethodVisitor

FieldsRemover -|> ClassVisitor
FieldsRemover .> ClassVisitor
FieldsRemover .> CustomMethodVisitor
FieldsRemover ..> FieldVisitor
FieldsRemover .> MethodVisitor

MyDefaultInsnNode ..> MyAbstractInsnNode

MyASMClassNode --> ClassNode
MyASMClassNode ..> ClassNode
MyASMClassNode ..> FieldNode
MyASMClassNode ..> MethodNode
MyASMClassNode ..> MyASMFieldNode
MyASMClassNode ..> MyFieldNode
MyASMClassNode ..> MyASMMethodNode
MyASMClassNode ..> MyMethodNode
MyASMClassNode ..> MyInnerClassNode

MyASMClassNodeCreator ..|> MyClassNodeCreator
MyASMClassNodeCreator ..> ClassNode
MyASMClassNodeCreator ..> ClassReader
MyASMClassNodeCreator ..> MyClassNode
MyASMClassNodeCreator ..> MyASMClassNode

MyASMClassReader --> org.objectweb.asm.ClassReader
MyASMClassReader ..> org.objectweb.asm.ClassReader

MyASMFieldInsnNode ..> AbstractInsnNode
MyASMFieldInsnNode --> FieldInsnNode
MyASMFieldInsnNode ..> FieldInsnNode
MyASMFieldInsnNode --> MyASMAbstractInsnNodeFactory
MyASMFieldInsnNode ..> MyASMAbstractInsnNodeFactory
MyASMFieldInsnNode ..> MyAbstractInsnNode

MyASMFieldNode --> FieldNode

MyASMLabel ..> MyLabel
MyASMLabel --> Label
MyASMLabel ..> Label

MyASMLabelNode ..> AbstractInsnNode
MyASMLabelNode --> LabelNode
MyASMLabelNode --> MyASMAbstractInsnNodeFactory
MyASMLabelNode ..> MyASMAbstractInsnNodeFactory
MyASMLabelNode ..> MyAbstractInsnNode
MyASMLabelNode ..> MyLabel

MyASMLocalVariableNode -down--> LocalVariableNode
MyASMLocalVariableNode .down..> MyASMLabelNode

MyASMMethodInsnNode ..> AbstractInsnNode
MyASMMethodInsnNode -> MethodInsnNode
MyASMMethodInsnNode ..> MethodInsnNode
MyASMMethodInsnNode ..> MyAbstractInsnNode
MyASMMethodInsnNode -> MyASMAbstractInsnNodeFactory
MyASMMethodInsnNode ..> MyASMAbstractInsnNodeFactory

MyASMMethodNode --> MethodNode
MyASMMethodNode ..> MethodNode
MyASMMethodNode --> MyASMAbstractInsnNodeFactory
MyASMMethodNode ..> MyASMAbstractInsnNodeFactory
MyASMMethodNode ..> MyAbstractInsnNode
MyASMMethodNode ..> MyLocalVariableNode

MyASMType -|> MyType
MyASMType ..> MyType
MyASMType --> Type

MyASMVarInsnNode ..> AbstractInsnNode
MyASMVarInsnNode --> MyASMAbstractInsnNodeFactory
MyASMVarInsnNode ..> MyASMAbstractInsnNodeFactory
MyASMVarInsnNode --> VarInsnNode
MyASMVarInsnNode ..> VarInsnNode

MyClassNode -->"*" MyFieldNode
MyClassNode -->"*" MyMethodNode
MyClassNode --> "*" MyInnerClassNode

MyLabelNode ..> MyLabel

MyLocalVariableNode -->"2" MyLabelNode

MyMethodNode -->"*" MyAbstractInsnNode
MyMethodNode -->"*" MyLocalVariableNode
@enduml
