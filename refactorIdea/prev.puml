@startuml
+class Linter{
	-{final} creator: MyClassNodeCreator
	-{final} myClassNodes: List<MyClassNode>
	-{final} diagramTypeToDiagram: Map<DiagramType,Diagram>
	-{final} packageToMyClassNode: Map<String,List<MyClassNode>>
	+Linter(classPaths:List<String>, myClassNodeCreator:MyClassNodeCreator, outputPath:String, fileToPackage:Map<String,String>):void
	-populateMaps():void
	-populateDiagramMap():void
	-createClassNodes(classPaths:List<String>, fileToPackage:Map<String,String>):List<MyClassNode>
	+generateDiagrams(diagrams:Set<DiagramType>):Map<StringBuilder,DiagramType>
	}

+interface MyClassNodeCreator{
	+{abstract}createMyClassNodeFromName(param1:String):MyClassNode
	+{abstract}createMyClassNodeFromFile(param1:File):MyClassNode
	+{abstract}createUniqueMyClassNodeFromName(param1:String):MyClassNode
	}

+abstract class MyLocalVariableNode{
	+ end: MyLabelNode
	+ index: int
	+ name: String
	+ start: MyLabelNode
	+MyLocalVariableNode():void
	}

+class MyDefaultInsnNode{
	+MyDefaultInsnNode():void
	+getNext():MyAbstractInsnNode
	+getOpcode():int
	+getType():int
	}

+abstract class MyType{
	+MyType():void
	+{abstract}getArgumentTypes():MyType[]
	+{abstract}getType(param1:String):MyType
	}

+abstract class MyFieldInsnNode{
	+ desc: String
	+ name: String
	+ owner: String
	+MyFieldInsnNode():void
	}

+abstract class MyClassNode{
	+ access: int
	+ fields: List<MyFieldNode>
	+ interfaces: List<String>
	+ methods: List<MyMethodNode>
	+ name: String
	+ superName: String
	+ innerClasses: List<MyInnerClassNode>
	+MyClassNode():void
	}

+abstract class MyMethodInsnNode{
	+ desc: String
	+ name: String
	+ owner: String
	+MyMethodInsnNode():void
	}

+abstract class MyAbstractInsnNode{
	+{static}{final} FIELD_INSN: int
	+{static}{final} LABEL: int
	+{static}{final} METHOD_INSN: int
	+{static}{final} VAR_INSN: int
	+MyAbstractInsnNode():void
	+{abstract}getNext():MyAbstractInsnNode
	+{abstract}getOpcode():int
	+{abstract}getType():int
	}

+abstract class MyFieldNode{
	+ access: int
	+ desc: String
	+ name: String
	+ signature: String
	+MyFieldNode():void
	}

+abstract class MyVarInsnNode{
	+ var: int
	+MyVarInsnNode():void
	}

+interface MyOpcodes{
	+{static}{final} ACC_PUBLIC: int
	+{static}{final} ACC_PRIVATE: int
	+{static}{final} ACC_PROTECTED: int
	+{static}{final} H_INVOKEVIRTUAL: int
	+{static}{final} H_INVOKESTATIC: int
	+{static}{final} H_INVOKESPECIAL: int
	+{static}{final} ACC_STATIC: int
	+{static}{final} H_INVOKEINTERFACE: int
	+{static}{final} ACC_FINAL: int
	+{static}{final} ILOAD: int
	+{static}{final} LLOAD: int
	+{static}{final} FLOAD: int
	+{static}{final} DLOAD: int
	+{static}{final} ALOAD: int
	+{static}{final} ISTORE: int
	+{static}{final} LSTORE: int
	+{static}{final} FSTORE: int
	+{static}{final} DSTORE: int
	+{static}{final} ASTORE: int
	+{static}{final} GETSTATIC: int
	+{static}{final} PUTSTATIC: int
	+{static}{final} GETFIELD: int
	+{static}{final} PUTFIELD: int
	+{static}{final} INVOKEVIRTUAL: int
	+{static}{final} INVOKESPECIAL: int
	+{static}{final} INVOKEINTERFACE: int
	+{static}{final} INVOKEDYNAMIC: int
	+{static}{final} ACC_INTERFACE: int
	+{static}{final} ACC_ABSTRACT: int
	+{static}{final} ACC_SYNTHETIC: int
	+{static}{final} ACC_ENUM: int
	+{static}{final} ASM8: int
	}

+abstract class MyMethodNode{
	+ access: int
	+ desc: String
	+ instructions: List<MyAbstractInsnNode>
	+ localVariables: List<MyLocalVariableNode>
	+ name: String
	+ signature: String
	+MyMethodNode():void
	}

enum DiagramType{
	UML_CONVERTER
	+{static}values():DiagramType[]
	+{static}valueOf(name:String):DiagramType
	-DiagramType():void
	}

+abstract class MyInnerClassNode{
	+ access: int
	+ name: String
	+MyInnerClassNode():void
	}

+abstract class MyLabelNode{
	+MyLabelNode():void
	+{abstract}getLabel():MyLabel
	}

+interface MyLabel{
	+{abstract}equals(param1:MyLabel):boolean
	}

package myasm {
	+class MyASMMethodInsnNode{
	-{final} methodInsnNode: MethodInsnNode
	-{final} factory: MyASMAbstractInsnNodeFactory
	+MyASMMethodInsnNode(methodInsnNode:AbstractInsnNode, factory:MyASMAbstractInsnNodeFactory):void
	+getNext():MyAbstractInsnNode
	+getOpcode():int
	+getType():int
	}

+class MyASMVarInsnNode{
	-{final} varInsnNode: VarInsnNode
	-{final} factory: MyASMAbstractInsnNodeFactory
	+MyASMVarInsnNode(varInsnNode:AbstractInsnNode, factory:MyASMAbstractInsnNodeFactory):void
	+getNext():MyAbstractInsnNode
	+getOpcode():int
	+getType():int
	}

+class MyASMClassNodeCreator{
	-{final} directoryPath: Path
	-{final} PACKAGE_NOT_FOUND: int
	+MyASMClassNodeCreator(directoryPath:Path):void
	-createMyClassNode(reader:ClassReader):MyClassNode
	+createMyClassNodeFromName(path:String):MyClassNode
	+createMyClassNodeFromFile(path:File):MyClassNode
	+createUniqueMyClassNodeFromName(className:String):MyClassNode
	-findRelativePath(desc:String):String
	}

+class MyASMClassNode{
	-{final} classNode: ClassNode
	+MyASMClassNode(classNode:ClassNode):void
	-convertInnerClasses():List<MyInnerClassNode>
	-convertFields():List<MyFieldNode>
	-convertMethods():List<MyMethodNode>
	+getClassNode():ClassNode
	}

+class MyASMLabel{
	-{final} label: Label
	+MyASMLabel(label:Label):void
	+equals(otherLabel:MyLabel):boolean
	+getLabel():Label
	}

+class MyASMLabelNode{
	-{final} labelNode: LabelNode
	-{final} factory: MyASMAbstractInsnNodeFactory
	+MyASMLabelNode(labelNode:AbstractInsnNode, factory:MyASMAbstractInsnNodeFactory):void
	+getNext():MyAbstractInsnNode
	+getOpcode():int
	+getType():int
	+getLabel():MyLabel
	}

+class MyASMFieldNode{
	-{final} fieldNode: FieldNode
	+MyASMFieldNode(fieldNode:FieldNode):void
	}

+class MyASMLocalVariableNode{
	-{final} localVariableNode: LocalVariableNode
	+MyASMLocalVariableNode(localVariableNode:LocalVariableNode):void
	}

+class MyASMAbstractInsnNodeFactory{
	+MyASMAbstractInsnNodeFactory():void
	+constructTypedInsnNode(node:AbstractInsnNode):MyAbstractInsnNode
	}

+class MyASMInnerClassNode{
	-{final} innerClassNode: InnerClassNode
	+MyASMInnerClassNode(icn:InnerClassNode):void
	}

+class MyASMMethodNode{
	-{final} methodNode: MethodNode
	-{final} factory: MyASMAbstractInsnNodeFactory
	+MyASMMethodNode(methodNode:MethodNode):void
	-convertInstructionNodes():List<MyAbstractInsnNode>
	-convertLocalVariableNodes():List<MyLocalVariableNode>
	}

+class MyASMType{
	-{final} type: Type
	+MyASMType(type:Type):void
	+MyASMType():void
	+getArgumentTypes():MyType[]
	+getType(typeDescriptor:String):MyType
	}

+class MyASMFieldInsnNode{
	-{final} fieldInsnNode: FieldInsnNode
	-{final} factory: MyASMAbstractInsnNodeFactory
	+MyASMFieldInsnNode(abstractInsnNode:AbstractInsnNode, factory:MyASMAbstractInsnNodeFactory):void
	+getNext():MyAbstractInsnNode
	+getOpcode():int
	+getType():int
	}

}
package diagramconverter {
	+interface Diagram{
	+{abstract}generateDiagramByNode(param1:MyClassNode, param2:StringBuilder):void
	+{abstract}generateDiagramByPackage(param1:List<MyClassNode>, param2:Map<String,List<MyClassNode>>):StringBuilder
	}

+class ConvertASMToUML{
	-{final} classUmlContent: StringBuilder
	-{final} hasARelationShipByClass: Map<String,Integer>
	-{final} allHasARelationships: Set<String>
	+ConvertASMToUML(classUmlContent:StringBuilder):void
	+generateDiagramByNode(myClassNode:MyClassNode, pumlContent:StringBuilder):void
	+generateDiagramByPackage(myClassNodeList:List<MyClassNode>, packageToMyClassNode:Map<String,List<MyClassNode>>):StringBuilder
	-addExtendsAndImplementsRelation(myClassNode:MyClassNode, cleanClassName:String):void
	-convertKeyNames(hasARelMap:Map<String,Integer>):Set<String>
	-convertClassInfo(myClassNode:MyClassNode):String
	-convertClassFields(fields:List<MyFieldNode>, className:String):String
	-convertClassMethods(methods:List<MyMethodNode>, className:String):String
	-getClassType(access:int):String
	-convertOuterClassInfo(myClassNode:MyClassNode, classString:StringBuilder, classType:String):void
	-convertInnerClassInfo(myClassNode:MyClassNode, classString:StringBuilder, classType:String):void
	-findInnerClassNode(myClassNode:MyClassNode, name:String):MyInnerClassNode
	-methodIsUserGenerated(method:MyMethodNode):boolean
	-appendFieldInfo(fieldString:StringBuilder, field:MyFieldNode, className:String):void
	-removeBracketsFromDesc(descName:String):String
	-addAHasARelationship(descName:String, className:String, collectionType:boolean):void
	-isCollectionType(descName:String):boolean
	-getMethodInfo(desc:String, methodNode:MyMethodNode):String
	-getParameterNames(methodNode:MyMethodNode, paramInfo:List<String>):List<String>
	-generateListOfParams(desc:String, params:List<String>):void
	-processObjectDescriptor(desc:String):String
	-processArrayDescriptor(desc:String):String
	-analyzeForParams(paramInfo:List<String>, paramNames:List<String>):String
	-appendParamInfo(paramsBuilder:StringBuilder, param:String, parameterName:String):void
	-getFieldType(desc:String):String
	-getCollectionType(desc:String):String
	-getCollectionHoldTypes(collected:String):String
	-generateCollectedTypes(collectionTypeList:List<String>):String
	-cleanCollectionParsing(originalList:List<String>):List<String>
	-parseGenericTypes(innerTypes:String):List<String>
	-isSynthetic(access:int):boolean
	-isPrimitive(desc:String):boolean
	-getPrimitiveFieldType(desc:String):String
	-getAccessModifier(access:int):String
	-getNonAccessModifiers(access:int):String
	-isJavaAPIClass(desc:String, originalClassName:String):boolean
	}

}
package constants {
	+class Constants{
	+{static}{final} PUML_TYPE: String
	+{static}{final} OUTPUT_DIRECTORY_FOR_CHECKS: String
	+{static}{final} OUTPUT_FOR_PUML_CLASSDIAGRAM: String
	+{static}{final} ABBREVIATION_ERROR: String
	+{static}{final} INVALID_PACKAGE: String
	+Constants():void
	}

}
MyMethodNode-->"*"MyLocalVariableNode
MyASMFieldNode--|>MyFieldNode
MyASMMethodNode-->MyASMAbstractInsnNodeFactory
MyASMType-->Type
MyASMLabel-->Label
MyASMClassNodeCreator..|>MyClassNodeCreator
MyASMLocalVariableNode-->LocalVariableNode
MyASMInnerClassNode--|>MyInnerClassNode
MyASMFieldInsnNode-->FieldInsnNode
MyClassNode-->"*"MyFieldNode
MyLabelNode--|>MyAbstractInsnNode
MyASMFieldInsnNode-->MyASMAbstractInsnNodeFactory
ConvertASMToUML..|>Diagram
Linter-->"*"DiagramType
MyDefaultInsnNode--|>MyAbstractInsnNode
MyASMFieldNode-->FieldNode
MyClassNode-->"*"MyMethodNode
Linter-->"*"Diagram
MyASMMethodNode--|>MyMethodNode
MyClassNode-->"*"MyInnerClassNode
MyASMMethodNode-->MethodNode
MyASMFieldInsnNode--|>MyFieldInsnNode
MyASMClassNode--|>MyClassNode
MyASMLabelNode-->MyASMAbstractInsnNodeFactory
MyVarInsnNode--|>MyAbstractInsnNode
MyASMVarInsnNode--|>MyVarInsnNode
MyASMLabelNode--|>MyLabelNode
MyASMLocalVariableNode--|>MyLocalVariableNode
MyASMVarInsnNode-->MyASMAbstractInsnNodeFactory
Linter-->MyClassNodeCreator
MyASMType--|>MyType
MyASMMethodInsnNode--|>MyMethodInsnNode
MyASMClassNode-->ClassNode
MyFieldInsnNode--|>MyAbstractInsnNode
MyASMLabel..|>MyLabel
MyASMInnerClassNode-->InnerClassNode
MyLocalVariableNode-->"2"MyLabelNode
MyMethodInsnNode--|>MyAbstractInsnNode
MyASMVarInsnNode-->VarInsnNode
MyASMLabelNode-->LabelNode
MyASMMethodInsnNode-->MethodInsnNode
MyMethodNode-->"*"MyAbstractInsnNode
Linter-->"*"MyClassNode
MyASMMethodInsnNode-->MyASMAbstractInsnNodeFactory
@enduml